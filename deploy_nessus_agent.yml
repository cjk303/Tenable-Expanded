---
- name: Deploy Nessus Agent
  hosts: agents
  gather_facts: yes
  become: yes
  vars:
    force_relink: true

  tasks:

    - name: Initialize host result
      set_fact:
        host_result:
          host: "{{ inventory_hostname }}"
          removed: "No"
          installed: "No"
          status: "Pending"

    # ---------------- Rapid7 Removal ----------------
    - name: Upload Rapid7 remover
      copy:
        src: r7remover.sh
        dest: /tmp/r7remover.sh
        mode: "0755"
      when: remove_rapid7 | bool
      become_method: "{{ escalate_method }}"

    - name: Run Rapid7 remover
      shell: /bin/bash /tmp/r7remover.sh
      register: r7_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when: remove_rapid7 | bool

    - name: Set Rapid7 removed status
      set_fact:
        host_result: "{{ host_result | combine({'removed': 'Yes' if (r7_result is defined and r7_result.rc == 0) else 'No'}) }}"

    # ---------------- Unsupported OS ----------------
    - name: Fail if OS unsupported
      fail:
        msg: "{{ inventory_hostname }}: Unsupported OS {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}"
      when: ansible_facts['distribution'] not in ['RedHat', 'Ubuntu', 'Debian']

    # ---------------- Remove existing Nessus token ----------------
    - name: Remove existing Nessus token if force_relink
      shell: "/opt/nessus_agent/sbin/nessuscli agent unlink"
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when: force_relink

    # ---------------- RHEL 7 ----------------
    - name: Upload RHEL 7 package
      copy:
        src: el7.rpm
        dest: /tmp/el7.rpm
        mode: "0755"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "7"
      become_method: "{{ escalate_method }}"

    - name: Install RHEL 7 package
      command: yum -y localinstall /tmp/el7.rpm
      args:
        creates: /opt/nessus_agent/sbin/nessuscli
      register: rpm_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "7"

    - name: Set RHEL 7 install status
      set_fact:
        host_result: "{{ host_result | combine({'installed': 'Yes' if (rpm_result is defined and rpm_result.rc==0) else 'No'}) }}"

    # ---------------- RHEL 8 ----------------
    - name: Upload RHEL 8 package
      copy:
        src: el8.rpm
        dest: /tmp/el8.rpm
        mode: "0755"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "8"
      become_method: "{{ escalate_method }}"

    - name: Install RHEL 8 package
      command: dnf -y localinstall /tmp/el8.rpm
      args:
        creates: /opt/nessus_agent/sbin/nessuscli
      register: rpm8_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "8"

    - name: Set RHEL 8 install status
      set_fact:
        host_result: "{{ host_result | combine({'installed': 'Yes' if (rpm8_result is defined and rpm8_result.rc==0) else 'No'}) }}"

    # ---------------- RHEL 9 ----------------
    - name: Upload RHEL 9 package
      copy:
        src: el9.rpm
        dest: /tmp/el9.rpm
        mode: "0755"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "9"
      become_method: "{{ escalate_method }}"

    - name: Install RHEL 9 package
      command: dnf -y localinstall /tmp/el9.rpm
      args:
        creates: /opt/nessus_agent/sbin/nessuscli
      register: rpm9_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when:
        - ansible_facts['distribution'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "9"

    - name: Set RHEL 9 install status
      set_fact:
        host_result: "{{ host_result | combine({'installed': 'Yes' if (rpm9_result is defined and rpm9_result.rc==0) else 'No'}) }}"

    # ---------------- Debian / Ubuntu ----------------
    - name: Upload Debian/Ubuntu package
      copy:
        src: NessusAgent-10.9.0-ubuntu1604_amd64.deb
        dest: /tmp/NessusAgent-10.9.0-ubuntu1604_amd64.deb
        mode: "0755"
      when: ansible_facts['distribution'] in ['Ubuntu','Debian']
      become_method: "{{ escalate_method }}"

    - name: Install Debian/Ubuntu package
      apt:
        deb: /tmp/NessusAgent-10.9.0-ubuntu1604_amd64.deb
        state: present
      register: deb_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"
      when: ansible_facts['distribution'] in ['Ubuntu','Debian']

    - name: Set Debian/Ubuntu install status
      set_fact:
        host_result: "{{ host_result | combine({'installed': 'Yes' if (deb_result is defined and not deb_result.failed) else 'No'}) }}"

    # ---------------- Start & Link Nessus Agent ----------------
    - name: Enable and start Nessus Agent
      service:
        name: nessusagent
        state: started
        enabled: yes
      become_method: "{{ escalate_method }}"

    - name: Link Nessus Agent
      shell: >
        /opt/nessus_agent/sbin/nessuscli agent link
        --key={{ activation_key }}
        {% if mode == "cloud" %}
        --cloud
        {% else %}
        --manager-host={{ manager_host }} --manager-port={{ manager_port }}
        {% endif %}
      args:
        creates: /opt/nessus_agent/.nessus/agent.key
      register: link_result
      ignore_errors: yes
      become_method: "{{ escalate_method }}"

    - name: Set final link status
      set_fact:
        host_result: "{{ host_result | combine({'status': 'Success' if (link_result is defined and link_result.rc==0) else 'Failed'}) }}"

    # ---------------- Send host result for SSE ----------------
    - name: Output host deployment result
      debug:
        msg: "{{ host_result }}"
